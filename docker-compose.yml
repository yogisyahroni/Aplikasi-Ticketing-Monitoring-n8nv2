services:
  # Main Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ticketing-monitoring-app
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "5173:5173"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - VITE_PORT=5173
      - DATABASE_TYPE=sqlite
      - SQLITE_DB_PATH=/app/data/database.sqlite
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - BCRYPT_ROUNDS=12
      - CORS_ORIGIN=http://localhost:5173
      - WEBSOCKET_PORT=3001
      - LOG_LEVEL=info
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
    
  # PostgreSQL Database (Optional - for production use)
  postgres:
    image: postgres:15-alpine
    container_name: ticketing-monitoring-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ticketing_monitoring
      - POSTGRES_USER=ticketing_user
      - POSTGRES_PASSWORD=ticketing_password_change_this
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - ticketing_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketing_user -d ticketing_monitoring"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: ticketing-monitoring-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_change_this
    volumes:
      - redis_data:/data
    networks:
      - ticketing_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production deployment)
  nginx:
    image: nginx:alpine
    container_name: ticketing-monitoring-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - ticketing_network
    depends_on:
      - app
    profiles:
      - production

# Named Volumes for Data Persistence
volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# Custom Network
networks:
  ticketing_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16